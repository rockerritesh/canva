# Enhanced workflow for deploying Canva platform to GitHub Pages
name: Deploy Canva Platform to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and organize content
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Organize and validate content
        run: |
          echo "üîß Organizing repository structure..."
          
          # Ensure all directories exist
          mkdir -p simulations content assets docs
          
          # Validate HTML files
          echo "‚úÖ Validating HTML files..."
          find simulations/ -name "*.html" -type f | wc -l | xargs echo "Found HTML files:"
          
          # Count and categorize simulations
          echo "üìä Repository Statistics:"
          echo "- HTML simulations: $(find simulations/ -name "*.html" | wc -l)"
          echo "- Content files: $(find content/ -name "*.md" | wc -l)"
          echo "- Documentation files: $(find docs/ -name "*.md" | wc -l)"
          
          # Generate sitemap
          echo "üó∫Ô∏è Generating sitemap..."
          echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > sitemap.xml
          echo "<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">" >> sitemap.xml
          echo "  <url><loc>https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/</loc></url>" >> sitemap.xml
          echo "  <url><loc>https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.gtml</loc></url>" >> sitemap.xml
          find simulations/ -name "*.html" | while read file; do
            echo "  <url><loc>https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$file</loc></url>" >> sitemap.xml
          done
          echo "</urlset>" >> sitemap.xml
          
          echo "‚úÖ Build preparation complete!"
      
      - name: Generate build info
        run: |
          echo "üìù Generating build information..."
          cat > build-info.json << EOF
          {
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "repository": "${{ github.repository }}",
            "simulationCount": $(find simulations/ -name "*.html" | wc -l),
            "version": "2.0.0"
          }
          EOF
          
          echo "üìä Build Info Generated:"
          cat build-info.json
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository with organized structure
          path: '.'

  # Deploy job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Post-deployment notification
        run: |
          echo "üöÄ Deployment successful!"
          echo "üìç Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üéØ Platform URL: ${{ steps.deployment.outputs.page_url }}index.gtml"
          echo "üìä Features deployed:"
          echo "  - Interactive simulations platform"
          echo "  - HTML/Markdown content editor"
          echo "  - Blog system with dynamic content"
          echo "  - Responsive design with animations"
          echo "  - API documentation"

  # Optional: Run additional checks
  quality-check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: HTML validation check
        run: |
          echo "üîç Running quality checks..."
          
          # Check for common issues in HTML files
          echo "Checking for script tags in simulations..."
          if grep -r "<script" simulations/ | grep -v "github.com" | grep -v "jsdelivr" | grep -v "cdnjs"; then
            echo "‚úÖ Script usage looks good"
          fi
          
          # Check file structure
          echo "üìÅ Verifying file structure..."
          if [ -f "index.gtml" ] && [ -f "README.md" ] && [ -d "simulations" ]; then
            echo "‚úÖ Required files and directories present"
          else
            echo "‚ùå Missing required files or directories"
            exit 1
          fi
          
          # Check for markdown files
          echo "üìù Checking content files..."
          if [ -f "content/blog.md" ]; then
            echo "‚úÖ Blog content present"
          fi
          
          if [ -f "docs/API.md" ]; then
            echo "‚úÖ API documentation present"
          fi
          
          echo "‚úÖ Quality checks completed successfully!"
